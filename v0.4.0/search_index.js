var documenterSearchIndex = {"docs":
[{"location":"#ReplGPT.jl","page":"ReplGPT.jl","title":"ReplGPT.jl","text":"","category":"section"},{"location":"","page":"ReplGPT.jl","title":"ReplGPT.jl","text":"Documentation for ReplGPT.jl","category":"page"},{"location":"","page":"ReplGPT.jl","title":"ReplGPT.jl","text":"","category":"page"},{"location":"#Key-Management-Functions","page":"ReplGPT.jl","title":"Key Management Functions","text":"","category":"section"},{"location":"","page":"ReplGPT.jl","title":"ReplGPT.jl","text":"ReplGPT.getAPIkey()","category":"page"},{"location":"#ReplGPT.getAPIkey-Tuple{}","page":"ReplGPT.jl","title":"ReplGPT.getAPIkey","text":"function getAPIkey()\n\nReturns an OpenAI API key to use from either the LocalPreferences.toml file or the OPENAI_API_KEY environment variable. If neither is present, returns missing.\n\n\n\n\n\n","category":"method"},{"location":"","page":"ReplGPT.jl","title":"ReplGPT.jl","text":"ReplGPT.setAPIkey(key::String)\n\nReplGPT.clearAPIkey()","category":"page"},{"location":"#ReplGPT.setAPIkey-Tuple{String}","page":"ReplGPT.jl","title":"ReplGPT.setAPIkey","text":"function setAPIkey(key::String)\n\nSets the OpenAI API key for ReplGPT to use. The key will be saved as plaintext to your environment's LocalPreferences.toml file (perhaps somewhere like ~/.julia/environments/v1.8/LocalPreferences.toml). The key can be deleted with ReplGPT.clearAPIkeyI(). \n\n\n\n\n\n","category":"method"},{"location":"#ReplGPT.clearAPIkey-Tuple{}","page":"ReplGPT.jl","title":"ReplGPT.clearAPIkey","text":"function clearAPIkey()\n\nDeletes the OpenAI API key saved in LocalPreferences.toml if present. \n\nSee also: ReplGPT.setAPIkey(key::String)\n\n\n\n\n\n","category":"method"},{"location":"#Conversation-Management","page":"ReplGPT.jl","title":"Conversation Management","text":"","category":"section"},{"location":"","page":"ReplGPT.jl","title":"ReplGPT.jl","text":"ReplGPT.initialize_conversation()\n\nReplGPT.save_conversation(filepath)","category":"page"},{"location":"#ReplGPT.initialize_conversation-Tuple{}","page":"ReplGPT.jl","title":"ReplGPT.initialize_conversation","text":"function ReplGPT.initialize_conversation()\n\nSets the ChatGPT conversation to an empty state. This effectively starts a new chat with ChatGPT with no recollection of past messages.\n\n\n\n\n\n","category":"method"},{"location":"#ReplGPT.save_conversation-Tuple{Any}","page":"ReplGPT.jl","title":"ReplGPT.save_conversation","text":"function ReplGPT.save_conversation(filepath)\n\nSaves the output of ReplGPT.conversation_as_string() to a file at  filepath. See the chat and output of ReplGPT.save_conversation() below.\n\nExample:\n\njulia> \n\nChatGPT> What does LISP stand for in computing?\n  LISP stands for \"LISt Processor\".\n\nChatGPT> How about FORTRAN?\n  FORTRAN stands for \"FORmula TRANslation\".\n\njulia> ReplGPT.save_conversation(\"/tmp/convo.txt\")\n\nshell> cat /tmp/convo.txt\nYou:\n----\n\nWhat does LISP stand for in computing?\n\nChatGPT:\n--------\n\nLISP stands for \"LISt Processor\".\n\nYou:\n----\n\nHow about FORTRAN?\n\nChatGPT:\n--------\n\nFORTRAN stands for \"FORmula TRANslation\".\n\n\n\n\n\n","category":"method"},{"location":"#Output-Formatting","page":"ReplGPT.jl","title":"Output Formatting","text":"","category":"section"},{"location":"","page":"ReplGPT.jl","title":"ReplGPT.jl","text":"ReplGPT.setFormatter(f::Function)\n\nReplGPT.markdown(s::String)\n\nReplGPT.plaintext(s::String)","category":"page"},{"location":"#ReplGPT.setFormatter-Tuple{Function}","page":"ReplGPT.jl","title":"ReplGPT.setFormatter","text":"function setFormatter(f::Function)\n\nSet the ReplGPT formatter. The default formatter is ReplGPT.markdown, but ReplGPT.plaintext may be preferred if ChatGPT's response shouldn't be displayed as Markdown text.\n\nOther functions may be passed to setFormatter as long as they accept a  string as input an return or print something.\n\nExamples\n\njulia> ReplGPT.setFormatter(ReplGPT.plaintext)\nplaintext (generic function with 1 method)\n\njulia> ReplGPT.setFormatter(ReplGPT.markdown)\nmarkdown (generic function with 1 method)\n\n\n\n\n\n","category":"method"},{"location":"#ReplGPT.markdown-Tuple{String}","page":"ReplGPT.jl","title":"ReplGPT.markdown","text":"function markdown(s::String)\n\nA simple Markdown formatter. This is the default since ChatGPT seems to like emitting Markdown strings and the formatting looks nice.\n\nSee also: ReplGPT.plaintext, another formatter that does no formatting, which is nice in case you don't want the ChatGPT output to be displayed as Markdown.\n\n\n\n\n\n","category":"method"},{"location":"#ReplGPT.plaintext-Tuple{String}","page":"ReplGPT.jl","title":"ReplGPT.plaintext","text":"function plaintext(s::String)\n\nA simple plain text formatter. Unlike ReplGPT.markdown, this formatter performs no text transformations except removing some leading whitespace.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"ReplGPT.jl","title":"Index","text":"","category":"section"},{"location":"","page":"ReplGPT.jl","title":"ReplGPT.jl","text":"","category":"page"}]
}
